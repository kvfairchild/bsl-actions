### 
# Runs on PRs labeled "automerge" after CI checks pass.
# Includes all auto-generated PRs from website submission.
# Checks if triggering PR modifies any code outside plugin dirs.
# If no changes are made outside /benchmarks, /data, /models, or /metrics,
# the PR is automatically approved and merged after checks pass.
### 

name: Merge plugin-only PRs

on:
  pull_request:
    types:
      - opened
      - edited
      - reopened
      - labeled
      - ready_for_review
      - synchronize
  # check_suite:
  #   conclusion: success

permissions: write-all

jobs:
  checkchanges:
    name: Check if PR only changes /benchmarks and/or /models
    runs-on: ubuntu-latest
    if: contains( github.event.pull_request.labels.*.name, 'automerge')
    outputs:
      PLUGIN_INFO: ${{ steps.getpluginfo.outputs.PLUGIN_INFO }}
      IS_PLUGIN_ONLY: ${{ steps.ispluginonly.outputs.IS_PLUGIN_ONLY }}
      RUN_SCORE: ${{ steps.runscore.outputs.RUN_SCORE }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Get changed files
        uses: dorny/paths-filter@v2.11.1
        id: filter
        with:
          list-files: shell
          filters: |
            changed:
              - '**'
      - name: Save changed files to env var
        run: echo "CHANGED_FILES=${{ steps.filter.outputs.changed_files }}" >> $GITHUB_ENV
      
      - name: Parse changed files with python script
        id: getpluginfo
        run: |
          echo "PLUGIN_INFO=$(python .github/workflows/parse_changed_files.py '${{ env.CHANGED_FILES }}')" >> $GITHUB_OUTPUT

      - name: check if plugin-only
        id: ispluginonly
        run: |
          echo "IS_PLUGIN_ONLY=$(jq -r '.is_plugin_only' <<< "$PLUGIN_INFO")" >> $GITHUB_OUTPUT

      - name: check if scoring needed
        id: runscore
        run: |
          echo "RUN_SCORE=$(jq -r '.run_score' <<< "$PLUGIN_INFO")" >> $GITHUB_OUTPUT
     
  automerge:
    name: If plugin-only, approve and merge
    runs-on: ubuntu-latest
    needs: checkchanges
    if: ${{ needs.checkchanges.outputs.IS_PLUGIN_ONLY }} == 'true'
    steps:
      - name: Auto Approve
        uses: hmarr/auto-approve-action@v3.1.0

      # - name: Add automerge label
      #   uses: actions-ecosystem/action-add-labels@v1
      #   with:
      #     labels:
      #       automerge

      - name: Auto Merge
        uses: plm9606/automerge_actions@1.2.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  runscore:
    name: Score plugins
    runs-on: ubuntu-latest
    needs: checkchanges
    env:
      PLUGIN_INFO: ${{ needs.checkchanges.outputs.PLUGIN_INFO }}
      JENKINS_URL: "braintree.mit.edu:8080"
      USER: "kvg0"
      JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}
      JOB_PATH: "dev_run_benchmarks"
    if: ${{ needs.checkchanges.outputs.RUN_SCORE }} == 'true'
    steps:
      - name: Add public, competition, and model_type to PLUGIN_INFO
        run: |
            echo "PLUGIN_INFO="$(<<<$PLUGIN_INFO jq '. + {public: "false", competition: "None", model_type: "artificialsubject"}')"" >> $GITHUB_ENV

      # - name: Extract models and benchmarks from PLUGIN_INFO
      #   run: |
      #       echo "MODELS=$(jq -r '.models' <<< "$PLUGIN_INFO")" >> $GITHUB_ENV
      #       echo "BENCHMARKS=$(jq -r '.benchmarks' <<< "$PLUGIN_INFO")" >> $GITHUB_ENV

      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Install brain-score core
        run: python -m pip install brainscore_core@git+https://github.com/brain-score/core.git@main

      - name: Call entrypoints
        run: |
          pwd
          python .github/workflows/entrypoints.py process_github_submission '${{ env.PLUGIN_INFO }}'
     

      # - name: Set endpoint URL
      #   run: |
      #     echo "URL=$JENKINS_URL/job/$JOB_PATH/buildWithParameters?models=$MODELSbenchmarks=$BENCHMARKS&token=$JENKINS_TOKEN" >> $GITHUB_ENV

      # - name: POST job
      #   if: env.RUN_SCORE == 'true'
      #   run: |
      #     curl -X POST -u ${{ env.USER }}:${{ secrets.JENKINS_TOKEN }} ${{ env.URL }}
