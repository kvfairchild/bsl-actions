### 
# Runs on manually submitted PRs labeled "automerge" after CI checks pass.
# Checks if triggering PR modifies any code outside plugin dirs.
# If no changes are made outside /benchmarks, /data, /models, or /metrics,
# the PR is automatically approved and merged after checks pass.
### 

name: Score manually merged PRs

on:
  push:
    branches:
      main

permissions: write-all

jobs:
  checkchanges:
    name: Check if PR only changes /benchmarks and/or /models
    runs-on: ubuntu-latest
    if: contains( github.event.pull_request.labels.*.name, 'automerge')
    outputs:
      PLUGIN_INFO: ${{ steps.getpluginfo.outputs.PLUGIN_INFO }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Get changed files
        uses: dorny/paths-filter@v2.11.1
        id: filter
        with:
          list-files: shell
          filters: |
            changed:
              - '**'
      - name: Save changed files to env var
        run: echo "CHANGED_FILES=${{ steps.filter.outputs.changed_files }}" >> $GITHUB_ENV
      
      - name: Parse changed files with python script
        id: getpluginfo
        run: |
          echo "PLUGIN_INFO=$(python .github/workflows/parse_changed_files.py '${{ env.CHANGED_FILES }}')" >> $GITHUB_OUTPUT

 posttojenkins:
    name: POST job request to Jenkins
    runs-on: ubuntu-latest
    needs: checkchanges
    env:
      PLUGIN_INFO: ${{ needs.checkchanges.outputs.PLUGIN_INFO }}
      JENKINS_URL: "braintree.mit.edu:8080"
      USER: "kvg0"
      JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}
      JOB_PATH: "dev_run_benchmarks"
    steps:
      - name: Set env vars (1)
        run: |
            echo "RUN_SCORE=$(jq -r '.run_score' <<< "$PLUGIN_INFO")" >> $GITHUB_ENV
            echo "MODELS=$(jq -r '.models' <<< "$PLUGIN_INFO")" >> $GITHUB_ENV
            echo "BENCHMARKS=$(jq -r '.benchmarks' <<< "$PLUGIN_INFO")" >> $GITHUB_ENV
     
      - name: Set job params from env vars
        run: |
          echo "JOB_PARAMS=${{ env.BENCHMARKS }}" >> $GITHUB_ENV

      - name: Set endpoint URL with job params
        run: |
          echo "URL=$JENKINS_URL/job/$JOB_PATH/buildWithParameters?$JOB_PARAMS&token=$JENKINS_TOKEN" >> $GITHUB_ENV

      - name: POST job
        if: env.RUN_SCORE == 'true'
        run: |
          curl -X POST -u ${{ env.USER }}:${{ secrets.JENKINS_TOKEN }} ${{ env.URL }}
