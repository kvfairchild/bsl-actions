### 
# Runs on PRs labeled "automerge" after CI checks pass.
# Includes all auto-generated PRs from website submission.
# Checks if triggering PR modifies any code outside plugin dirs.
# If no changes are made outside /benchmarks, /data, /models, or /metrics,
# the PR is automatically approved and merged after checks pass.
### 

name: Merge plugin-only PRs

on:
  pull_request:
    types:
      - opened
      - edited
      - reopened
      - labeled
      - ready_for_review
      - synchronize
  # check_suite:
  #   conclusion: success

permissions: write-all

jobs:
  checkchanges:
    name: Check if PR only changes /benchmarks and/or /models
    runs-on: ubuntu-latest
    if: contains( github.event.pull_request.labels.*.name, 'automerge')
    outputs:
      PLUGIN_INFO: ${{ steps.getpluginfo.outputs.PLUGIN_INFO }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Get changed files
        uses: dorny/paths-filter@v2.11.1
        id: filter
        with:
          list-files: shell
          filters: |
            changed:
              - '**'
      - name: Save changed files to env var
        run: echo "CHANGED_FILES=${{ steps.filter.outputs.changed_files }}" >> $GITHUB_ENV
      
      - name: Parse changed files with python script
        id: getpluginfo
        run: |
          echo "PLUGIN_INFO=$(python .github/workflows/parse_changed_files.py '${{ env.CHANGED_FILES }}')" >> $GITHUB_OUTPUT
     
  automerge:
    name: If plugin-only, approve and merge
    runs-on: ubuntu-latest
    needs: checkchanges
    env:
      PLUGIN_INFO: ${{ needs.checkchanges.outputs.PLUGIN_INFO }}
    steps:
      - name: check if plugin-only
        run: |
          echo "IS_PLUGIN_ONLY=$(jq -r '.is_plugin_only' <<< "$PLUGIN_INFO")" >> $GITHUB_ENV
      - name: Auto Approve
        if: env.IS_PLUGIN_ONLY == 'true'
        uses: hmarr/auto-approve-action@v3.1.0

      # - name: Add automerge label
      #   uses: actions-ecosystem/action-add-labels@v1
      #   with:
      #     labels:
      #       automerge

      - name: Auto Merge
        if: env.IS_PLUGIN_ONLY == 'true'
        uses: plm9606/automerge_actions@1.2.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  posttojenkins:
    name: POST job request to Jenkins
    runs-on: ubuntu-latest
    needs: checkchanges
    env:
      PLUGIN_INFO: needs.checkchanges.outputs.PLUGIN_INFO
      JENKINS_URL: "braintree.mit.edu:8080"
      USER: "kvg0"
      JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}
      JOB_PATH: "dev_run_benchmarks"
    steps:
      - name: Set env vars with plugin info
        run: |
            echo "RUN_SCORE=$(jq -r ".run_score" <<< "$PLUGIN_INFO")" >> $GITHUB_ENV
            echo "MODELS=$(jq -r ".models" <<< "$PLUGIN_INFO")" >> $GITHUB_ENV
            echo "BENCHMARKS=$(jq -r ".benchmarks" <<< "$PLUGIN_INFO")" >> $GITHUB_ENV
      - name: Set job params from env variables
        run: |
          echo "JOB_PARAMS=${{ env.BENCHMARKS }}" >> $GITHUB_ENV
      - name: Build URLs
        if: env.RUN_SCORE == 'true'
        run: |
          echo "CRUMB_URL=$JENKINS_URL/crumbIssuer/api/json --user $USER:${{ secrets.JENKINS_TOKEN }}" >> $GITHUB_ENV
          echo "URL=$JENKINS_URL/job/$JOB_PATH/buildWithParameters?$JOB_PARAMS&token=$JENKINS_TOKEN" >> $GITHUB_ENV
      - name: POST job
        if: env.RUN_SCORE == 'true'
        run: curl -X POST -u ${{ env.USER }}:${{ secrets.JENKINS_TOKEN }} ${{ env.URL }}
